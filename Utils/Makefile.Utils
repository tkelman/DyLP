# Secondary makefile for dylp's configuration utilities.

# The two programs built by this makefile are used to determine configuration
# settings for dylp. Don't do anything fancy: a vanilla compile & link is the
# right choice.

##############################################################################
# You should not need to edit below this line.
##############################################################################

.DELETE_ON_ERROR:

# This is required so that we always bring the proper binary up from the
# OS-specific directories that hold the binaries.

.PHONY: fpchecks booltype

# Take advantage of COIN boilerplate in Makefile.rules.

TARGETDIR := $(UNAME)-g
DEPDIR := Dep

include ${MakefileDir}/Makefile.rules

# A directory to track what we've built.

BUILDS = .Built

##############################################################################

tools: fpchecks booltype

# fpchecks is the main configuration program for bonsaiG/dylp. It makes an
# attempt to determine the programming environment and other attributes which
# determine the proper definitions for macros that control conditional
# compilation in bonsaiG, dylp, and OsiDylp.

fpchecks: $(TARGETDIR)/fpchecks
	@ echo "Copying $< to $@."
	@ cp $< $@
	@ mkdir -p $(BUILDS)
	@ touch $(BUILDS)/$(TARGETDIR)

$(TARGETDIR)/fpchecks: $(TARGETDIR)/fpchecks.o
	@ echo -n "Building $@ ..."
	@ $(LINK.c) -lm -o $@ $^
	@ echo " done."

# booltype is more specialised. It's purpose in life is to determine the C
# integer type which is the same size as a C++ bool. This is used to define
# the BOOL symbol required when building the OsiDylp configuration of dylp.

booltype: $(TARGETDIR)/booltype
	@ echo "Copying $< to $@."
	@ cp $< $@
	@ mkdir -p $(BUILDS)
	@ touch $(BUILDS)/$(TARGETDIR)

$(TARGETDIR)/booltype: $(TARGETDIR)/booltype.o $(TARGETDIR)/boolequiv.o
	@ echo -n "Building $@ ..."
	@ $(LINK.cc) -o $@ $^
	@ echo " done."

clean:
	@ rm -rf $(TARGETDIR)
	@ rm -rf Dep
	@ rm -f $(filter-out booltype.cpp, $(wildcard booltype*))
	@ rm -f $(filter-out fpchecks.c, $(wildcard fpchecks*))
	@ rm -f $(BUILDS)/$(TARGETDIR)

distclean:
	@ if [ -d $(BUILDS) ] ; then \
	    for dir in `ls $(BUILDS)` ; do \
	      if [ -d $$dir ] ; then \
		rm -rf $$dir ; \
	      fi ; \
	    done ; \
	  fi
	@ rm -rf $(BUILDS)
	@ rm -f $(filter-out booltype.cpp, $(wildcard booltype*))
	@ rm -f $(filter-out fpchecks.c, $(wildcard fpchecks*))
	@ rm -rf Junk Dep
