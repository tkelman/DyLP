
# This is not a standalone makefile. It constructs a string, DYLP_COMPILE_DEFS,
# with an appropriate set of defines for building code that uses dylp.

# This makefile expects to be able to find a pair of configuration programs,
# booltype and fpchecks, which come with the dylp distribution (in the Utils
# directory). The variable DylpToolDir should be set to the path to the Utils
# directory. If DylpToolDir is already set, believe it.

ifdef DylpHome
  DylpToolDir ?= $(DylpHome)/Utils
else
  DylpToolDir ?= ../Utils
endif

# Different C++ implementations can choose different sizes for the bool data
# type. To make sure the C code will interoperate, we need to form a correct
# typedef for the fake bool type defined in loustd.h. If this isn't already
# defined, try to find the booltype program. Failing that, bail and let the
# client sort it out.

ifndef BOOLTYPE
  ifndef BOOLTYPEPROG
    pathsearch = $(firstword $(wildcard $(addsuffix /$(1), \
		 $(subst :, ,$(DylpToolDir):$(PATH)))))
    BOOLTYPEPROG := $(call pathsearch,booltype)
  endif
  ifneq ($(BOOLTYPEPROG),)
    BOOLTYPE := $(shell $(BOOLTYPEPROG))
    export BOOLTYPE
  else
    $(warning Cannot find the booltype program.)
  endif
  ifeq ($(BOOLTYPE),)
    $(error Cannot determine proper C type for "typedef <type> bool")
  endif
endif

DYLP_COMPILE_DEFS := -DBOOL=$(BOOLTYPE)

# Programming environments and hardware differ in their support for floating
# point computation. fpchecks attempts to sort it out and spit out the
# correct compile-time symbol definitions.

ifndef FPCONFIGFLAGS
  ifndef FPCONFIGPROG
    pathsearch = $(firstword $(wildcard $(addsuffix /$(1), \
		 $(subst :, ,$(DylpToolDir):$(PATH)))))
    FPCONFIGPROG := $(call pathsearch,fpchecks)
  endif
  ifneq ($(FPCONFIGPROG),)
    FPCONFIGFLAGS := $(shell $(FPCONFIGPROG))
    export FPCONFIGFLAGS
  else
    $(warning Cannot find fpchecks program)
  endif
  ifeq ($(FPCONFIGFLAGS),)
    $(error Cannot determine proper floating point configuration flags. \
    	    Bailing out. Check vector.h and take it from there)
  endif
endif

DYLP_COMPILE_DEFS += $(FPCONFIGFLAGS)

# Now set DYLP_COMPILE_DEFS to correspond to possible dylp compile time
# options as requested by DYLP_OPTIONS. Known keywords are:
#  * stats	enable dylp statistics collection
#  * paranoia	enable dylp paranoia
#  * info	enable dylp informational printing

# info is a bit tricky --- enabling info in dylp means *not* defining NDEBUG.
# Since COIN boilerplate will insert -DNDEBUG in CXXFLAGS when the user asks
# for optimisation, we need to strip it. In the case where we don't want
# info prints, no need to add it twice.

ifdef DYLP_OPTIONS
  ifeq ($(filter stats,$(DYLP_OPTIONS)),stats)
    DYLP_COMPILE_DEFS += -DDYLP_STATISTICS
  endif
  ifeq ($(filter paranoia,$(DYLP_OPTIONS)),paranoia)
    DYLP_COMPILE_DEFS += -DPARANOIA
  endif
  ifeq ($(filter info,$(DYLP_OPTIONS)),info)
    CXXFLAGS := $(filter-out -DNDEBUG, $(CXXFLAGS))
  else
    ifeq ($(filter -DNDEBUG, $(CXXFLAGS)),)
      DYLP_COMPILE_DEFS += -DNDEBUG
    endif
  endif
else
  DYLP_COMPILE_DEFS += -DNDEBUG
endif

